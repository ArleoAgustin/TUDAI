/* 	Hacer un programa que dada la matriz de secuencias de enteros definida y
	precargada permita encontrar por cada fila la posici√≥n de inicio y fin de la
	secuencia cuya suma de valores sea mayor.
 */

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Random;
public class Practica {
	public static final int MAXFILA = 5;
	public static final int MAXCOLUMNA = 10;
	public static final int MAXVALOR = 10;
	public static final int MINVALOR = 1;
	public static final double probabilidad_numero = 0.4;

	public static void main(String[] args) {                
		int [][] matint;                                  
		matint = new int[MAXFILA][MAXCOLUMNA];
                  
		cargar_matriz_aleatorio_secuencias_int(matint);
		System.out.println();
		imprimir_matriz_int(matint);
		System.out.println();
		recorrer_filas (matint);
	}


//FUNCION RECORRER MATRIZ POR FILAS
	
	public static void recorrer_filas (int [][] matint) {
		
		int fila = 0;
		
		while (fila < MAXFILA) {
			imprimir_suma_mayor_secuencia(matint[fila]);
			fila++;
		}
	}
	
	
	
//PROCEDIMIENTO IMPRIMIR INICIO Y FIN DE SECUENCIA
	
	public static void imprimir_suma_mayor_secuencia (int [] arrint) {
		
		int inicio = 0;
		int fin = -1;
		int suma = 0;
		int inicio_mayor = 0;
		int fin_mayor = 0;
		int mayor = 0;
		
		while (inicio < MAXCOLUMNA-1) {
			inicio = obtener_inicio_secuencia(arrint, fin+1);
			if (inicio < MAXCOLUMNA-1) {
				fin = obtener_fin_secuencia(arrint, inicio);
			
			suma = obtener_suma_secuencia (arrint, inicio, fin);
			
			if (suma > mayor) {
				mayor = suma;
				inicio_mayor = inicio;
				fin_mayor = fin;
			}
			}
		}
		System.out.println("LA SECUENCIA DE MAYOR SUMA INICIA EN " + inicio_mayor+ " HASTA "+ fin_mayor );
		
	}
	
	
	public static int obtener_suma_secuencia (int [] arrint, int inicio, int fin) {
		
		int suma = 0;
		int pos = inicio;
		
		while (pos <= fin) {
			suma += arrint[pos];
			pos++;
		}
		return(suma);
	}




// INICIO DE SECUENCIA	
		
	public static int obtener_inicio_secuencia (int [] arr, int fin) {
		
		int pos = fin;
		
		while ((arr[pos] == 0) && (pos < MAXCOLUMNA-1)) {
			pos++;
		}
		
		return (pos);
	}
		
		
		
		
		
// FIN DE SECUENCIA	
		
	public static int obtener_fin_secuencia (int [] arr, int inicio) {
		
		int front = inicio;
			
		while (arr [front] != 0) {
			front++;
		}
			
		return (front -1);
	} 
	
	
	



//CARGA DE SECUENCIAS EN MATRICES LLAMANDO A "CARGA ALEATORIA DE ARREGLOS"

	public static void cargar_matriz_aleatorio_secuencias_int(int [][] matint){
		for (int fila = 0; fila < MAXFILA; fila++){
			cargar_arreglo_aleatorio_secuencias_int(matint[fila]);
		}
		System.out.println("");
	}





//CARGA DE SECUENCIAS EN ARREGLOS

	public static void cargar_arreglo_aleatorio_secuencias_int(int [] arrint){
				
		Random r = new Random();
		arrint[0] = 0;
		arrint[MAXCOLUMNA-1] = 0;
		for (int pos = 1; pos < MAXCOLUMNA-1; pos++){
			if (r.nextDouble()>probabilidad_numero){
				arrint[pos]=(r.nextInt(MAXVALOR-MINVALOR+1) + MINVALOR);
			}
			else {
				arrint[pos]=0;
			}
		}
	}



//IMPRIMIR MATRIZ


	public static void imprimir_matriz_int(int [][] mat){
		for (int fila = 0; fila < MAXFILA; fila++){
			System.out.print("|");
			for (int columna = 0; columna < MAXCOLUMNA; columna++){
				System.out.print(mat[fila][columna]+"|");
			}
		System.out.println("");
		}
	}

	
}