/* 	Se tiene una matriz MAT de enteros de tama√±o NFIL x NCOL, donde en cada fila
 *  se tiene una secuencia de numeros distintos de cero separadas por uno o mas ceros.
 *  Realizar un programa que ordene de forma ascendente las ultimas CANT secuencias.
 * 
 */

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Random;
public class Practica {
	public static final int MAXFILA = 5;
	public static final int MAXCOLUMNA = 10;
	public static final int MAXVALOR = 10;
	public static final int MINVALOR = 1;
	public static final double probabilidad_numero = 0.4;

	public static void main(String[] args) {                
		int [][] matint;                                  
		matint = new int[MAXFILA][MAXCOLUMNA];
                  
		cargar_matriz_aleatorio_secuencias_int(matint);
		
		System.out.println();
		imprimir_matriz_int(matint);
		System.out.println();
		recorrer_filas(matint);
		System.out.println();
		imprimir_matriz_int(matint);
	}

	
	
	
	public static void recorrer_filas (int [][] matint) {
		
		int fila = 0;
		
		while (fila < MAXFILA ) {
			
			ordenar_ultima_secuencia(matint[fila]);
			
			fila++;
		}
		
	}
	
	
	
//ORDENAR ULTIMA SECUENCIA
	
	public static void ordenar_ultima_secuencia (int [] arrint) {
		
		int inicio, fin, cont;
		inicio = 0;
		fin = MAXCOLUMNA;
		cont = 0;
		
		while (cont < 1) {
			
			if (fin > 0) {
				fin = fin_secuencia (arrint, fin-1);
				if (fin > 0) {
					inicio = inicio_secuencia (arrint, fin);
				}
				
			}
			System.out.println("Inicio: " + inicio+ " fin: " + fin);
			cont++;
		}
		ordenar_fila_burbujeo(arrint, inicio, fin);
	}
	
	
	
//BURBUJEO
	
	public static void ordenar_fila_burbujeo(int[] arr, int inicio, int fin){
		int temp;
		for(int i = inicio;i <= fin; i++){
			for (int j = inicio ; j <= fin-1; j++){
				if (arr[j] > arr[j+1]){
					temp = arr[j];
					arr[j] = arr[j+1];
					arr[j+1] = temp;

				}
			}
		}
	}
	
	
	
	
	
//FIN DE SECUENCIA
	
	public static int fin_secuencia (int [] arrint, int fin) {
		
		int pos = fin;
		
		while ((arrint[pos] == 0) && (pos > 0)) {
			
			pos--;
		}
		
		return(pos);
	}
	
	
	
	
//INICIO DE SECUENCIA	
	
	public static int inicio_secuencia (int [] arrint, int fin) {
		
		int pos = fin;
		
		while ((pos > 0) && (arrint[pos] != 0)) {
			
			pos--;
			
		}
		
		return(pos +1);
	
	}
	
	
	
	
	
	
	
	
	
//FUNCION CARGAR VALOR
	
	public static int cargar_entero () {
							
			int valor = 0;
							
			BufferedReader entrada = new BufferedReader(new InputStreamReader(System.in));
							
			try {
				System.out.println ("Ingrese un valor entero: ");
				valor = Integer.valueOf(entrada.readLine());
			}
			catch(Exception exc) {
			System.out.println (exc);
								
			}
		return (valor);
		}
	
		
		
		



//CARGA DE SECUENCIAS EN MATRICES LLAMANDO A "CARGA ALEATORIA DE ARREGLOS"

	public static void cargar_matriz_aleatorio_secuencias_int(int [][] matint){
		for (int fila = 0; fila < MAXFILA; fila++){
			cargar_arreglo_aleatorio_secuencias_int(matint[fila]);
		}
		System.out.println("");
	}





//CARGA DE SECUENCIAS EN ARREGLOS

	public static void cargar_arreglo_aleatorio_secuencias_int(int [] arrint){
				
		Random r = new Random();
		arrint[0] = 0;
		arrint[MAXCOLUMNA-1] = 0;
		for (int pos = 1; pos < MAXCOLUMNA-1; pos++){
			if (r.nextDouble()>probabilidad_numero){
				arrint[pos]=(r.nextInt(MAXVALOR-MINVALOR+1) + MINVALOR);
			}
			else {
				arrint[pos]=0;
			}
		}
	}



//IMPRIMIR MATRIZ


	public static void imprimir_matriz_int(int [][] mat){
		for (int fila = 0; fila < MAXFILA; fila++){
			System.out.print("|");
			for (int columna = 0; columna < MAXCOLUMNA; columna++){
				System.out.print(mat[fila][columna]+"|");
			}
		System.out.println("");
		}
	}

	
}