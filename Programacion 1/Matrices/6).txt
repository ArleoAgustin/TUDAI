/* Hacer un programa que dado una matriz de enteros de tamaño 5*10 que se encuentra
	precargada, solicite al usuario un numero entero y elimine todas las ocurrencia de numero
	en la matriz si existe. Mientras exista (en cada iteración tiene que buscar la posición fila y
	columna) tendrá que usar dicha posición para realizar un corrimiento a izquierda.
 */

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Random;
public class Practica {
	public static final int MAXFILA = 5;
	public static final int MAXCOLUMNA = 10;
	public static final int MAXVALOR = 10;
	public static final int MINVALOR = 1;

	public static void main(String[] args) {                
		int [][] matint;                                  
		matint = new int[MAXFILA][MAXCOLUMNA];
                  
		cargar_matriz_aleatorio_int(matint);
		imprimir_matriz_int(matint);
		System.out.println();
		posicionar_correr (matint);
		System.out.println();
		imprimir_matriz_int(matint);
	}

	
	//FUNCION CARGAR VALOR
	
		public static int cargar_entero () {
							
			int valor = 0;
							
			BufferedReader entrada = new BufferedReader(new InputStreamReader(System.in));
							
			try {
				System.out.println ("Ingrese un valor entero: ");
				valor = Integer.valueOf(entrada.readLine());
			}
			catch(Exception exc) {
			System.out.println (exc);
								
			}
		return (valor);
		}
	
		
		
//PROCEDIMIENTO DE LA CONSIGNA 		
		
		
	public static void posicionar_correr (int [][] matint) {
		
		int valor = cargar_entero();
		int fila = 0;
		while (fila < MAXFILA) {
			
			buscar_valor_eliminar(matint[fila], valor);
			fila++;
		}
	}
	
	
//BUSCAR VALORES POR FILA Y SI SON IGUALES SE ELIMINAN (CORRIMIENTO)	
	
	public static void buscar_valor_eliminar (int [] arrint, int valor) {
		
		int pos = 0;
		int front = 0;
		
		while (pos < MAXCOLUMNA-1) {
			
			if (arrint[pos] != valor) {
				pos++;
			}
		
			while ((arrint[pos] == valor) && (pos < MAXCOLUMNA-1)) {
				front = pos;
				
				while (front < MAXCOLUMNA -1 ) {
					arrint[front] = arrint[front +1];
					front++;
				}
					
			}
			
			
		}
		
	}
	
		

	

//CARGAR MATRIZ 

	public static void cargar_matriz_aleatorio_int(int [][] mat){
		Random r = new Random();
		for (int fila = 0; fila < MAXFILA; fila++){
			for (int columna = 0; columna < MAXCOLUMNA; columna++){
				mat[fila][columna]=(r.nextInt(MAXVALOR+MINVALOR-1) + MINVALOR);
			}
		}
	}


//IMPRIMIR MATRIZ

	public static void imprimir_matriz_int(int [][] mat){
		for (int fila = 0; fila < MAXFILA; fila++){
			System.out.print("|");
			for (int columna = 0; columna < MAXCOLUMNA; columna++){
				System.out.print(mat[fila][columna]+"|");
			}
			System.out.println("");
		}
	}
	
}