/* 	Hacer un programa que dado una matriz ordenada creciente por filas de
	enteros de tamaño 4*5 que se encuentra precargada, solicite al usuario un
	numero entero y una fila, y elimine la primer ocurrencia de numero en la
	fila indicada (un número igual) si existe.
 */

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Random;
public class Practica {
	public static final int MAXFILA = 5;
	public static final int MAXCOLUMNA = 10;
	public static final int MAXVALOR = 10;
	public static final int MINVALOR = 1;

	public static void main(String[] args) {                
		int [][] matint;                                  
		matint = new int[MAXFILA][MAXCOLUMNA];
                  
		cargar_matriz_aleatorio_int(matint);
		imprimir_matriz_int(matint);
		System.out.println();
		insertar_valor_en_fila (matint);
		System.out.println();
		imprimir_matriz_int(matint);
	}

	
	//FUNCION CARGAR VALOR
	
		public static int cargar_entero () {
							
			int valor = 0;
							
			BufferedReader entrada = new BufferedReader(new InputStreamReader(System.in));
							
			try {
				System.out.println ("Ingrese un valor entero: ");
				valor = Integer.valueOf(entrada.readLine());
			}
			catch(Exception exc) {
			System.out.println (exc);
								
			}
		return (valor);
		}
	
		
		
//PROCEDIMIENTO DE LA CONSIGNA 		
		
	public static void insertar_valor_en_fila (int [][] matint) {
			
		int valor = cargar_entero();
		System.out.println("Ingrese una fila ");
		int fila = cargar_entero();
		
		 if (fila < MAXFILA) {
			 
			 corrimiento_eliminar_ocurrencia(matint[fila], valor);
		}
	}
	
		

	public static void corrimiento_eliminar_ocurrencia (int [] arrint, int valor) {
		
		int pos = 0;
		
		while((pos < MAXCOLUMNA-1) && (arrint[pos] != valor)) {
			
				pos++;
		}
		
		if (arrint[pos] == valor) {
			corrimiento_der(arrint, pos);
		}
	}
	
	
//CORRIMIENTO A DERECHA	
	
	public static void corrimiento_der (int [] arrint, int pos) {
		
		while (pos < MAXCOLUMNA -1) {
			arrint[pos] = arrint[pos+1];
			pos++;
		}
	}
	
	

//CARGAR MATRIZ 

	public static void cargar_matriz_aleatorio_int(int [][] mat){
		Random r = new Random();
		for (int fila = 0; fila < MAXFILA; fila++){
			for (int columna = 0; columna < MAXCOLUMNA; columna++){
				mat[fila][columna]=(r.nextInt(MAXVALOR+MINVALOR-1) + MINVALOR);
			}
		}
	}


//IMPRIMIR MATRIZ

	public static void imprimir_matriz_int(int [][] mat){
		for (int fila = 0; fila < MAXFILA; fila++){
			System.out.print("|");
			for (int columna = 0; columna < MAXCOLUMNA; columna++){
				System.out.print(mat[fila][columna]+"|");
			}
			System.out.println("");
		}
	}
	
}