/* 	Hacer un programa que dada la matriz de secuencias de enteros definida y
	precargada, y un número entero ingresado por el usuario, elimine de cada fila
	las secuencias de tamaño igual al número ingresado.
 */

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Random;
public class Practica {
	public static final int MAXFILA = 5;
	public static final int MAXCOLUMNA = 10;
	public static final int MAXVALOR = 10;
	public static final int MINVALOR = 1;
	public static final double probabilidad_numero = 0.4;

	public static void main(String[] args) {                
		int [][] matint;                                  
		matint = new int[MAXFILA][MAXCOLUMNA];
                  
		cargar_matriz_aleatorio_secuencias_int(matint);
		System.out.println();
		imprimir_matriz_int(matint);
		System.out.println();
		recorrer_filas (matint);
		System.out.println();
		imprimir_matriz_int(matint);
	}


//FUNCION RECORRER MATRIZ POR FILAS
	
	public static void recorrer_filas (int [][] matint) {
		
		int valor = cargar_entero();
		int fila = 0;
		
		while (fila < MAXFILA) {
			buscar_anteultima_secuencia(matint[fila], valor);
			fila++;
		}
	}
	
	
	
//PROCEDIMIENTO ELIMINAR IGUALES A VALOR
	
	public static void buscar_anteultima_secuencia (int [] arrint, int valor) {
		
		int inicio = 0;
		int fin = -1;
		boolean es_igual;
		
		while (inicio < MAXCOLUMNA-1) { 	
			inicio = obtener_inicio_secuencia(arrint, fin+1);
			if (inicio < MAXCOLUMNA-1) {
				fin = obtener_fin_secuencia(arrint, inicio);
		
				es_igual = igual_a_valor(arrint, inicio, fin, valor);
				
				if (es_igual == true) {
					eliminar_secuencia(arrint, inicio, fin);
				}
			}
			}
	}
	
	
	
//ELIMINAR SECUENCIA MEDIANTE UN CORRIMIENTO
	
	public static void eliminar_secuencia (int [] arrint, int inicio, int fin) {
		
		int pos = inicio;
		
		while (pos <= fin) {
			arrint[pos] = arrint[pos -1];
			pos++;
		}
	}
	

//FUNCION QUE VERIFICA SI VALOR ES IGUAL A LA LONGITUD DE LA SECUENCIA
	
	public static boolean igual_a_valor (int [] arrint, int inicio, int fin, int valor) {
		
		boolean es = false;
		int cont = 0;
		
		while  (inicio <= fin) {
			cont++;
			inicio++;
		}
		
		if (cont == valor) {
			es = true;
		}
		
		return(es);
	}



// INICIO DE SECUENCIA	
		
	public static int obtener_inicio_secuencia (int [] arr, int fin) {
		
		int pos = fin;
		
		while ((arr[pos] == 0) && (pos < MAXCOLUMNA -1)) {
			pos++;
		}
		
		return (pos);
	}
		
		
		
		
		
// FIN DE SECUENCIA	
		
	public static int obtener_fin_secuencia (int [] arr, int inicio) {
		
		int front = inicio;
			
		while ((arr [front] != 0) && (front < MAXCOLUMNA -1)) {
			front++;
		}
			
		return (front-1);
	} 
	
	
	
//FUNCION CARGAR VALOR
	
	public static int cargar_entero () {
								
		int valor = 0;
							
		BufferedReader entrada = new BufferedReader(new InputStreamReader(System.in));
						
		try {
			System.out.println ("Ingrese un valor entero: ");
			valor = Integer.valueOf(entrada.readLine());
		}
		catch(Exception exc) {
			System.out.println (exc);
		}			
			
		return (valor);
	}
		



//CARGA DE SECUENCIAS EN MATRICES LLAMANDO A "CARGA ALEATORIA DE ARREGLOS"

	public static void cargar_matriz_aleatorio_secuencias_int(int [][] matint){
		for (int fila = 0; fila < MAXFILA; fila++){
			cargar_arreglo_aleatorio_secuencias_int(matint[fila]);
		}
		System.out.println("");
	}





//CARGA DE SECUENCIAS EN ARREGLOS

	public static void cargar_arreglo_aleatorio_secuencias_int(int [] arrint){
				
		Random r = new Random();
		arrint[0] = 0;
		arrint[MAXCOLUMNA-1] = 0;
		for (int pos = 1; pos < MAXCOLUMNA-1; pos++){
			if (r.nextDouble()>probabilidad_numero){
				arrint[pos]=(r.nextInt(MAXVALOR-MINVALOR+1) + MINVALOR);
			}
			else {
				arrint[pos]=0;
			}
		}
	}



//IMPRIMIR MATRIZ


	public static void imprimir_matriz_int(int [][] mat){
		for (int fila = 0; fila < MAXFILA; fila++){
			System.out.print("|");
			for (int columna = 0; columna < MAXCOLUMNA; columna++){
				System.out.print(mat[fila][columna]+"|");
			}
		System.out.println("");
		}
	}

	
}