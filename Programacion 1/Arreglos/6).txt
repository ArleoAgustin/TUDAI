/*	Hacer un programa que dado un arreglo de enteros de tamaño 10 que se encuentra
	precargado, solicite al usuario un numero entero y elimine todas las ocurrencia de numero en el
	arreglo si existe. Mientras exista (en cada iteración tiene que buscar la posición dentro del
	arreglo) tendrá que usar la posición para realizar un corrimiento a izquierda (quedarán tantas
	copias de la última posición del arreglo como cantidad de ocurrencias del número). */

import java.io.BufferedReader;
import java.io.InputStreamReader;
public class practicos {

	public static int MAXVALOR = 10;
	public static int MINVALOR = 0;
	
	public static void main(String[] args) {
		int [] arrint = new int[MAXVALOR];
		int valor;
		BufferedReader entrada = new BufferedReader(new InputStreamReader(System.in));
		
		try{
			
				cargar_arreglo(arrint);
				System.out.println("Ingrese un numero para eliminar dentro del arreglo");
				valor = Integer.valueOf(entrada.readLine());
			System.out.println();
				corrimiento_borrar(arrint, valor);
				mostrar_arreglo(arrint);
			System.out.println();
	
		}
	
		catch(Exception exc){
			System.out.println(exc);
		}
	}
	
	
	
// ----------------------------------------PROCEDIMIENTOS Y FUNCIONES------------------------------------------------------------//
	
	// procedimiento cargar arreglo
	
	public static void cargar_arreglo(int [] arr){
		BufferedReader entrada = new BufferedReader(new InputStreamReader(System.in));
	
		try{
			
				for (int pos = 0; pos < MAXVALOR; pos++){
					System.out.println("Ingrese un entero: ");
					arr[pos] = Integer.valueOf(entrada.readLine());
				}
				
		}
	
		catch(Exception exc){
			System.out.println(exc);
		}
	}

	//funcion buscar si el valor ingresado esta y devolver la posicion
	
	public static int posicion_valorigual (int [] arr, int valor) {

		int buscar_valor;
		buscar_valor = MINVALOR;
		
		while ((buscar_valor < MAXVALOR) && (arr[buscar_valor] != valor)) {
			buscar_valor = buscar_valor +1;
		}
		

		return (buscar_valor);
	
	}
	
	//procedimiento, si esta valor hacer el corrimiento

	public static void corrimiento_borrar (int [] arrint, int valor) {
		
		
		int posicion_valor, front, contador;

		contador = MINVALOR;
		
		while (contador < MAXVALOR) {
			posicion_valor  = posicion_valorigual(arrint, valor);
			
			if (posicion_valor == MAXVALOR) {
				System.out.println("El valor que ingreso no se encuentra en el arreglo");
			}
			else {
				
				front = posicion_valor;
				while (front < MAXVALOR -1) {
					arrint[front] = arrint[front +1];
					front = front +1;
				}
			}
			contador = contador +1;
	
		}
	
	}
	
	
	//procedimiento mostrar arreglo

	public static void mostrar_arreglo(int [] arr){
		for (int pos = 0; pos < MAXVALOR; pos++){
			System.out.println("Arreglo["+pos+"] =>: " + arr[pos]);
		}
	}

}