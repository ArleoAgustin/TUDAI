/*	Hacer un programa que dado el arreglo definido y precargado elimine todas
	las secuencias que tienen orden descendente entre sus elementos.*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
//import java.util.Random;
public class practicos {
	public static final int MAX = 10;
	public static final int MAXVALOR = 9;
	public static final int MINVALOR = 1;
	public static final double probabilidad_numero = 0.4;
	
	public static void main(String[] args) {
		int [] arrint;
		arrint = new int[MAX];

			cargar_arreglo(arrint);
			imprimir_arreglo(arrint);
			System.out.println();
			eliminar_secuencia_iguales(arrint);
			System.out.println();
			imprimir_arreglo(arrint);

	}
	
	
//-------------------------------------------------PROCEDIMIENTOS Y FUNCIONES-----------------------------------------------------------------------------//
	
/*	
//CARGA DE SECUENCIAS EN ARREGLOS DE ENTEROS	

	public static void cargar_arreglo_aleatorio_secuencias_int(int [] arr){
		
		Random r = new Random();
		arr[0] = 0;
		arr[MAX-1] = 0;
		for (int pos = 1; pos < MAX-1; pos++){
			if (r.nextDouble()>probabilidad_numero){
			arr[pos]=(r.nextInt(MAXVALOR-MINVALOR+1) + MINVALOR);
			}
			else{
			arr[pos]=0;
			}
		}
	}
	
	*/

	
	
// procedimiento cargar arreglo
	
	public static void cargar_arreglo(int [] arr){
		BufferedReader entrada = new BufferedReader(new InputStreamReader(System.in));
	
		try{
			
				for (int pos = 0; pos < MAX; pos++){
					System.out.println("Ingrese un entero: ");
					arr[pos] = Integer.valueOf(entrada.readLine());
				}
				
		}
	
		catch(Exception exc){
			System.out.println(exc);
		}
	}
	
	
	
	
	
//PROCEDIMIENTO PRINCIPAL
	
	
	public static void eliminar_secuencia_iguales (int[] arr) {
		
		int inicio = 0;
		int fin = -1;
		boolean  descendente;
		
		while ( inicio < MAX) {
			inicio = obtener_inicio_secuencia (arr, fin+1);
			
			if (inicio < MAX) {
				fin = obtener_fin_secuencia(arr, inicio);
				descendente = es_descendente(arr, inicio, fin);
				if (descendente == true) {
					System.out.println("La secuencia " + inicio + " , " + fin + " es descendente");
					eliminar_secuencia (arr, inicio, fin);
				}
			}	
		}
		
	}
	
	
	
// VERIFICAR SI LA SECUENCIA ES DESCENDENTE
	
	public static boolean es_descendente (int [] arr, int inicio, int fin) {
	
		boolean si = false;
		int contador = 0;
		int pos = inicio;
		int longitud = 0;
		
		while (inicio <= fin) {
			longitud++;
			inicio++;
		}
		
		while (pos <= fin) {
			if (arr[pos] >= arr[pos +1]) {
			
				pos++;
				contador++;
			}
			else {
				pos++;
			}
		}
		
		
		if (contador  == longitud) {
			si = true;
		}
		
		return(si);
	}
	
	
	
	

	
// INICIO DE SECUENCIA	
		
	public static int obtener_inicio_secuencia (int [] arr, int fin) {
		
		int pos = fin;
		
		while (pos < MAX && arr[pos] == 0) {
			pos++;
		}
		
		return (pos);
	}
	
	
	
	
	
// FIN DE SECUENCIA	
	
	public static int obtener_fin_secuencia (int [] arr, int inicio) {
	
		int pos = inicio;
		
		while (pos < MAX && arr [pos] != 0 ) {
			pos++;
		}
		
		return (pos -1);
	}
	
	
	
// ELIMINAR SECUENCIA
	
	public static void eliminar_secuencia (int [] arr, int inicio, int fin) {
		
		int pos = inicio;
		
		while (pos <= fin) {
			arr[pos] = arr[pos -1];
			pos++;
		}
	}
	
	
	

	
	
//IMPRIMIR ARREGLOS
	
	
	public static void imprimir_arreglo(int [] arr){
		
		System.out.print("Arreglo de secuencias int\n|");
		for (int pos = 0; pos < MAX; pos++){
			System.out.print(arr[pos]+"|");
		}
		System.out.print("\n");
		}
}