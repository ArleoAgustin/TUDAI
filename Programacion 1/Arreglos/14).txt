/*	Hacer un programa que dado el arreglo definido y precargado, y un número
	entero ingresado por el usuario, elimine las secuencias de tamaño igual al
	número ingresado.*/

//import java.io.BufferedReader;
//import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Random;
public class practicos {
	public static final int MAX = 20;
	public static final int MAXVALOR = 9;
	public static final int MINVALOR = 1;
	public static final double probabilidad_numero = 0.4;
	
	public static void main(String[] args) {
		int [] arrint;
		int [] arrcopia = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
		arrint = new int[MAX];

			cargar_arreglo_aleatorio_secuencias_int(arrint);
			imprimir_arreglo_secuencias_int(arrint);
			System.out.println();
			encontrar_secuencia_y_copiar(arrint, arrcopia);
			System.out.println();
			imprimir_arreglo_secuencias_int(arrcopia);

	}
	
	
//-------------------------------------------------PROCEDIMIENTOS Y FUNCIONES-----------------------------------------------------------------------------//
	
	
//CARGA DE SECUENCIAS EN ARREGLOS DE ENTEROS	

	public static void cargar_arreglo_aleatorio_secuencias_int(int [] arr){
		
		Random r = new Random();
		arr[0] = 0;
		arr[MAX-1] = 0;
		for (int pos = 1; pos < MAX-1; pos++){
			if (r.nextDouble()>probabilidad_numero){
			arr[pos]=(r.nextInt(MAXVALOR-MINVALOR+1) + MINVALOR);
			}
			else{
			arr[pos]=0;
			}
		}
	}
	
	

//FUNCION CARGAR VALOR
	
	public static int cargar_valor () {
						
		int valor = 0;
						
		BufferedReader entrada = new BufferedReader(new InputStreamReader(System.in));
						
		try {
			System.out.println ("Ingrese un valor entero: ");
			valor = Integer.valueOf(entrada.readLine());
		}
		catch(Exception exc) {
		System.out.println (exc);
							
		}
	return (valor);
	}
		
	


	public static void encontrar_secuencia_y_copiar (int[] arr, int [] arrcopia) {
		
		boolean son_iguales;
		int valor = cargar_valor();
		int inicio = 0;
		int fin = -1;
		
		while (inicio < MAX) {
			inicio = obtener_inicio_secuencia(arr, fin +1);
			if (inicio < MAX) {
				fin = obtener_fin_secuencia(arr, inicio);
			
				son_iguales = secuencia_igual_a_valor(arr, inicio, fin, valor);
				if (son_iguales == true) {
					copiar_secuencia (arr, arrcopia, inicio, fin);
					System.out.println ("Se copio una secuencia desde "+ inicio + " hasta " + fin);
				}
				
				
			}
		}
		
	}	
	
	
	
	public static int obtener_inicio_secuencia (int [] arr, int fin) {
		
		int pos = fin;
		while (pos < MAX && arr[pos] == 0) {
				pos++;
		}
		 return (pos);
	}
	
	
	
	
	public static int obtener_fin_secuencia (int [] arr, int inicio) {
	
		int pos = inicio;
		
		while (pos < MAX && arr [pos] != 0 ) {
			pos++;
		}
		return (pos -1);
	}
	
	
	public static boolean secuencia_igual_a_valor (int [] arr, int inicio, int fin, int valor) {
		
		boolean es_igual = false;
		int contador = 0;
		
		while (inicio <= fin) {
			contador++;
			inicio++;
		}
		if (contador == valor) {
			es_igual = true;
		}
		
		
	return (es_igual);
	}
	
	
	public static void copiar_secuencia (int [] arrint, int [] arrcopia, int inicio, int fin) {
		
		int poscopia = 0;
		int posint = inicio;
		
		while (arrcopia[poscopia] != 0) {
			poscopia++;
		}
		
		if ((poscopia > 0 && arrcopia[poscopia -1] != 0) && (poscopia < MAX)) {
			poscopia++;
		}
		
		if (arrcopia[poscopia] == 0) {
			while (posint <= fin) {
				arrcopia[poscopia] = arrint[posint];
				poscopia++;
				posint++;
			}
		
		}
	}
	
	
	
	public static void imprimir_arreglo_secuencias_int(int [] arr){
		
		System.out.print("Arreglo de secuencias int\n|");
		for (int pos = 0; pos < MAX; pos++){
			System.out.print(arr[pos]+"|");
		}
		System.out.print("\n");
		}
}